{"version":3,"sources":["components/Carousel/utilits/animatedMove.js","components/Carousel/utilits/makeContentDOM.js","components/Carousel/images/right_arrow.svg","components/Carousel/images/left_arrow.svg","components/Carousel/components/CarouselButton/CarouselButton.js","components/Carousel/components/CarouselPageLink/CarouselPageLink.js","components/Carousel/components/CarouselPagination/CarouselPagination.js","components/Carousel/components/CarouselContent/CarouselContent.js","components/Carousel/Carousel.js","components/App.js","index.js"],"names":["animatedMove","startPoint","endPoint","mode","currentFrame","requestAnimationFrame","currentframe","framesNum","animationFunction","moveDistance","Math","sin","PI","document","querySelector","style","left","animationStep","makeContentDOM","content","itemsPerView","loop","length","Array","fill","reduce","editedContent","currentEl","i","push","firstPart","contentArr","centralPart","lastPart","concat","CarouselButton","props","size","moveTo","position","buttonClassName","isActive","leftArrow","rightArrow","handler","direction","onClick","className","src","alt","CarouselPageLink","id","CarouselPagination","itemsQuantity","buttonsArr","currentValue","index","toString","CarouselContent","state","startTime","mouseEvents","touchEvents","getClientCoords","bind","onMoveStart","onMove","onMoveEnd","event","this","includes","type","clientX","clientY","changedTouches","preventDefault","addEventListener","setState","Date","now","movePoint","offsetX","abs","offsetY","removeEventListener","onFastSwipeEnd","ref","forwardRef","onMouseDown","onTouchStart","onTouchMove","onTouchEnd","children","React","Component","Carousel","carouselContent","createRef","carousel","gap","undefined","DOMItemsQuantity","wasMounted","currentPos","correctPositions","prevButtonIsActive","nextButtonIsActive","touchPoint","saveTouchPoint","touchMove","buttonMove","paginationMove","positionCorrection","fastSwipe","arrowButtonsManage","getLoop","carouselWidth","current","clientWidth","itemWidth","gridTemplate","resultArr","renderingPosition","gridTemplateColumns","movingPoint","offset","mouseUpPos","offsets","map","elem","minOffset","previousValue","nearestCorrectPos","indexOf","newPos","console","log","oldIndex","directionCorrection","currentIndex","loopCorrection","buttonSize","buttonPos","App","getRandom","min","max","floor","random","numberOfItems","randomConfig","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.d88779bc.chunk.js","sourcesContent":["function animatedMove(startPoint, endPoint, mode) {\r\n\r\n    const framesNum = 15 //config the number of animation frames\r\n    let currentFrame = 0\r\n\r\n    function animationStep(currentframe, framesNum, startPoint, endPoint) {\r\n        const moveDistance = endPoint - startPoint\r\n        let animationFunction\r\n        if (!mode || mode !== 'fastSwipe') {\r\n            animationFunction = (Math.sin((Math.PI / 2) * -1 + Math.PI * currentframe / (framesNum - 1)) + 1) / 2 //sine function from 0 to 1\r\n            // animationFunction = (Math.sin((Math.PI / 2) * -1 + Math.PI * currentframe / (framesNum - 1)) + 1) / 2 //sine function from 0 to 1\r\n        } else {\r\n            animationFunction = Math.sin(Math.PI / 2 * currentframe / (framesNum - 1))\r\n        }\r\n        document.querySelector('.CarouselContent').style.left = `${startPoint + moveDistance * animationFunction}px`\r\n    }\r\n  \r\n    requestAnimationFrame(function animatedMove() {\r\n\r\n        animationStep(currentFrame, framesNum, startPoint, endPoint)\r\n\r\n        currentFrame++\r\n        if (currentFrame < framesNum) {\r\n            requestAnimationFrame(animatedMove);\r\n        }\r\n  \r\n    });\r\n}\r\n\r\nexport default animatedMove","import React from \"react\";\r\n\r\nfunction makeContentDOM(content, itemsPerView, loop) {\r\n    if (!loop || content.length <= itemsPerView) {\r\n        return Array(content.length).fill('').reduce((editedContent, currentEl, i) => {\r\n            editedContent.push(\r\n                <div key={i}>{content[i]}</div>\r\n            )\r\n            return editedContent\r\n        }, [])\r\n    } else {\r\n        let infiniteContent = []\r\n        const firstPart = content.reduce((contentArr, currentEl, i) => {\r\n            if (i >= content.length - itemsPerView) {\r\n                contentArr.push(<div key={i - content.length}>{content[i]}</div>)\r\n            }\r\n            return contentArr\r\n        }, [])\r\n        const centralPart = content.reduce((contentArr, currentEl, i) => {\r\n            contentArr.push(<div key={i}>{content[i]}</div>)\r\n            return contentArr\r\n        }, [])\r\n        const lastPart = content.reduce((contentArr, currentEl, i) => {\r\n            if (i < itemsPerView) {\r\n                contentArr.push(<div key={i + content.length}>{content[i]}</div>)\r\n            }\r\n            return contentArr\r\n        }, [])\r\n        return infiniteContent = firstPart.concat(centralPart, lastPart)\r\n    }\r\n}\r\n\r\nexport default makeContentDOM","export default __webpack_public_path__ + \"static/media/right_arrow.4e2eb212.svg\";","export default __webpack_public_path__ + \"static/media/left_arrow.9d3f788d.svg\";","import React from \"react\";\r\nimport rightArrow from '../../images/right_arrow.svg'\r\nimport leftArrow from '../../images/left_arrow.svg'\r\nimport './CarouselButton.css';\r\n\r\nfunction CarouselButton(props) {\r\n\r\n    const style = {\r\n        'width': `${props.size}px`,\r\n        'height': `${props.size}px`,\r\n        'top': `calc((100% - 60px) / 2 - ${props.size / 2}px)`,\r\n        'left': `${props.moveTo === 'previous' ? props.position : 'auto'}px`,\r\n        'right': `${props.moveTo === 'next' ? props.position : 'auto'}px`\r\n    }\r\n\r\n    function move() {\r\n        let direction = props.moveTo === 'previous' ? -1 : 1\r\n        props.onClick(direction)\r\n    }\r\n\r\n    let buttonClassName = `CarouselButton`\r\n    if (!props.isActive) {\r\n        buttonClassName = buttonClassName.concat(` CarouselButton_unactive`)\r\n    }\r\n\r\n    const content = props.moveTo === 'previous' ? leftArrow : rightArrow\r\n    const handler = props.isActive ? move : null\r\n\r\n    return(\r\n        <button className={buttonClassName} onClick={handler} style={style}>\r\n            <img src={content} alt={`${props.moveTo} button`}/> \r\n        </button>\r\n    )\r\n}\r\n\r\nexport default CarouselButton","import React, { Component, useState, useEffect } from \"react\";\r\nimport './CarouselPageLink.css';\r\n\r\nfunction CarouselPageLink(props) {\r\n\r\n    function goTo() {\r\n        props.onClick(props.id)\r\n    }\r\n\r\n    return(\r\n        <button className='CarouselPageLink' onClick={goTo}>\r\n            {props.id + 1}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default CarouselPageLink","import React from \"react\";\r\nimport './CarouselPagination.css';\r\nimport CarouselPageLink from \"../CarouselPageLink/CarouselPageLink\";\r\n\r\nfunction CarouselPagination(props) {\r\n\r\n    function makePaginationDOM() {\r\n        return Array(props.itemsQuantity).fill('').reduce((buttonsArr, currentValue, index) => {\r\n            buttonsArr.push(\r\n                <CarouselPageLink key={index.toString()} id={index} onClick={props.onClick}/>\r\n            )\r\n            return buttonsArr\r\n        }, [])\r\n    }\r\n\r\n    return(\r\n        <div className='CarouselPagination'>\r\n            {makePaginationDOM()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CarouselPagination","import React from \"react\";\r\nimport { version } from \"react-dom\";\r\nimport { render } from \"react-dom\";\r\nimport './CarouselContent.css';\r\n\r\nclass CarouselContent extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            startPoint: [],\r\n            direction: null,\r\n            startTime: null,\r\n        }\r\n\r\n        this.mouseEvents = ['mousedown','mousemove','mouseup']\r\n        this.touchEvents = ['touchstart','touchmove','touchend']\r\n        this.getClientCoords = this.getClientCoords.bind(this)\r\n        this.onMoveStart = this.onMoveStart.bind(this)\r\n        this.onMove = this.onMove.bind(this)\r\n        this.onMoveEnd = this.onMoveEnd.bind(this)\r\n    }\r\n\r\n    getClientCoords(event) {\r\n        if (this.mouseEvents.includes(event.type)) {\r\n            return [event.clientX, event.clientY]\r\n        } else if (this.touchEvents.includes(event.type)) {\r\n            return [event.changedTouches[0].clientX, event.changedTouches[0].clientY]\r\n        }\r\n    }\r\n\r\n    onMoveStart(event) {\r\n        if (this.mouseEvents.includes(event.type)) {\r\n            event.preventDefault()\r\n            document.addEventListener('mousemove', this.onMove)\r\n            document.addEventListener('mouseup', this.onMoveEnd)\r\n        }\r\n        const startPoint = this.getClientCoords(event)\r\n        this.setState({startPoint: startPoint, startTime: Date.now()})\r\n        this.props.onMoveStart(startPoint[0])\r\n    }\r\n\r\n    onMove(event) {\r\n        if (!this.state.direction) {\r\n            const movePoint = this.getClientCoords(event)\r\n            const offsetX = Math.abs(movePoint[0] - this.state.startPoint[0])\r\n            const offsetY = Math.abs(movePoint[1] - this.state.startPoint[1])\r\n            this.setState({direction: `${(offsetX < offsetY) ? 'vertical' : `${(movePoint[0] - this.state.startPoint[0]) > 0 ? 'right' : 'left'}`}`})\r\n        } else if (this.state.direction === 'left' || this.state.direction === 'right') {\r\n            this.props.onMove(this.getClientCoords(event)[0])\r\n        }\r\n    }\r\n\r\n    onMoveEnd(event) {\r\n        if (this.mouseEvents.includes(event.type)) {\r\n            document.removeEventListener('mousemove', this.onMove)\r\n            document.removeEventListener('mouseup', this.onMoveEnd)\r\n        }\r\n        if (['right', 'left'].includes(this.state.direction)) {\r\n            const fastSwipe = Date.now() - this.state.startTime < 150\r\n            if (fastSwipe) {\r\n                this.props.onFastSwipeEnd(this.getClientCoords(event)[0], this.state.direction)\r\n            } else {\r\n                this.props.onMoveEnd(this.getClientCoords(event)[0])\r\n            }         \r\n        }\r\n        this.setState({direction: null})\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className='CarouselContent' \r\n                ref={this.props.forwardRef} \r\n                onMouseDown={this.onMoveStart}\r\n                onTouchStart={this.onMoveStart} \r\n                onTouchMove={this.onMove} \r\n                onTouchEnd={this.onMoveEnd}\r\n            >\r\n                {this.props.children}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default React.forwardRef((props, ref) => <CarouselContent {...props} forwardRef={ref} />)","import React, { createRef, Component } from \"react\";\r\nimport './Carousel.css';\r\nimport animatedMove from \"./utilits/animatedMove\";\r\nimport makeContentDOM from './utilits/makeContentDOM'\r\nimport CarouselButton from \"./components/CarouselButton/CarouselButton\";\r\nimport CarouselPagination from \"./components/CarouselPagination/CarouselPagination\";\r\nimport CarouselContent from \"./components/CarouselContent/CarouselContent\";\r\n\r\nclass Carousel extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.carouselContent = createRef()\r\n        this.carousel = createRef()\r\n\r\n        this.itemsQuantity = this.props.children.length\r\n        this.itemsPerView = this.props.itemsPerView ? this.props.itemsPerView : 1\r\n        this.gap = this.props.gap !== undefined ? this.props.gap : 10\r\n        this.loop = this.props.loop ? this.props.loop : false\r\n        this.DOMItemsQuantity = this.loop && this.itemsQuantity > this.itemsPerView ? this.itemsQuantity + 2 * this.itemsPerView : this.itemsQuantity \r\n        // if (loop) we need to duplicate some items\r\n\r\n        this.state ={\r\n            wasMounted: false,\r\n            currentPos: 0, //current style.left of carousel content block\r\n            correctPositions: [], //array of correct coordinates for carousel content block\r\n            prevButtonIsActive: this.loop && this.itemsQuantity > this.itemsPerView,\r\n            nextButtonIsActive: this.itemsQuantity > this.itemsPerView,\r\n            touchPoint: 0\r\n        }\r\n\r\n        this.saveTouchPoint = this.saveTouchPoint.bind(this)\r\n        this.touchMove = this.touchMove.bind(this)\r\n        this.buttonMove = this.buttonMove.bind(this)\r\n        this.paginationMove = this.paginationMove.bind(this)\r\n        this.positionCorrection = this.positionCorrection.bind(this)\r\n        this.fastSwipe = this.fastSwipe.bind(this)\r\n        this.arrowButtonsManage = this.arrowButtonsManage.bind(this)\r\n        this.getLoop = this.getLoop.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.state.wasMounted) {\r\n            const carouselWidth = this.carousel.current.clientWidth\r\n            const itemWidth = (carouselWidth - (this.gap * (this.itemsPerView - 1))) / this.itemsPerView\r\n            const gridTemplate = `repeat(${this.DOMItemsQuantity}, ${itemWidth}px)`\r\n            const correctPositions = (this.itemsQuantity <= this.itemsPerView) ?\r\n                [(carouselWidth - (itemWidth * this.itemsQuantity + this.gap * (this.itemsQuantity - 1))) / 2] :\r\n                Array(this.DOMItemsQuantity - this.itemsPerView + 1).fill(0).reduce((resultArr, currentValue, index) => {\r\n                    resultArr.push(index * (itemWidth + this.gap) * -1)\r\n                    return resultArr\r\n                }, [])\r\n            const renderingPosition = (this.itemsQuantity <= this.itemsPerView) ?\r\n                (carouselWidth - (itemWidth * this.itemsQuantity + this.gap * (this.itemsQuantity - 1))) / 2 :\r\n                (this.loop) ? correctPositions[this.itemsPerView] : 0\r\n            this.carouselContent.current.style.left = `${renderingPosition}px`\r\n            this.carouselContent.current.style.gap = `0px ${this.gap}px`\r\n            this.carouselContent.current.style.gridTemplateColumns = gridTemplate\r\n            this.setState({\r\n                currentPos: renderingPosition,\r\n                correctPositions: correctPositions,\r\n                wasMounted: true\r\n            })\r\n        }\r\n    }\r\n\r\n    saveTouchPoint(touchPoint) {\r\n        this.setState({touchPoint: touchPoint})\r\n    }\r\n    \r\n    touchMove(movingPoint) {\r\n        const offset = movingPoint - this.state.touchPoint\r\n        this.carouselContent.current.style.left = `${this.state.currentPos + offset}px`\r\n    }\r\n\r\n    positionCorrection(mouseUpPos) {\r\n        const currentPos = this.state.currentPos - this.state.touchPoint + mouseUpPos\r\n        const offsets = this.state.correctPositions.map((elem) => {\r\n            return Math.abs(currentPos - elem)\r\n        })\r\n        const minOffset = offsets.reduce((previousValue, currentValue) => {\r\n            return currentValue < previousValue ? currentValue : previousValue\r\n        })\r\n        const nearestCorrectPos = offsets.indexOf(minOffset)\r\n        const newPos = this.state.correctPositions[nearestCorrectPos]\r\n        this.arrowButtonsManage(this.state.correctPositions.indexOf(newPos))\r\n        animatedMove(currentPos, newPos)\r\n        this.getLoop(newPos)\r\n    }\r\n\r\n    fastSwipe(mouseUpPos, direction) {\r\n        const currentPos = this.state.currentPos - this.state.touchPoint + mouseUpPos\r\n        console.log(currentPos)\r\n        const oldIndex = this.state.correctPositions.indexOf(this.state.currentPos)\r\n        const directionCorrection = (direction === 'left') ? 1 : -1\r\n        const newPos = this.state.correctPositions[oldIndex + directionCorrection]\r\n        this.arrowButtonsManage(this.state.correctPositions.indexOf(newPos))\r\n        animatedMove(currentPos, newPos, 'fastSwipe')\r\n        this.getLoop(newPos)\r\n    }\r\n\r\n    buttonMove(direction) {\r\n        const currentIndex = this.state.correctPositions.indexOf(this.state.currentPos)\r\n        const newPos = this.state.correctPositions[currentIndex + direction]\r\n        this.arrowButtonsManage(this.state.correctPositions.indexOf(newPos))\r\n        animatedMove(this.state.currentPos, newPos)\r\n        this.getLoop(newPos)\r\n    }\r\n\r\n    paginationMove(id) {\r\n        //if (loop) we have additional carousel items in DOM\r\n        const loopCorrection = this.loop && this.itemsQuantity > this.itemsPerView ? this.itemsPerView : 0\r\n        let newPos = this.state.correctPositions[id + loopCorrection]\r\n        if (newPos === undefined) { //this can happen if you go to the last item of carousel and loop is unactive\r\n            newPos = this.state.correctPositions[this.itemsQuantity - this.itemsPerView] //it wiil be move on nearest correct position \r\n        }\r\n        if (newPos !== this.state.currentPos) {\r\n            this.arrowButtonsManage(this.state.correctPositions.indexOf(newPos))\r\n            animatedMove(this.state.currentPos, newPos)\r\n            this.setState({currentPos: newPos})\r\n        }\r\n    }\r\n\r\n    arrowButtonsManage(position) {\r\n        if (!this.loop) {\r\n            if (position === 0) {\r\n                this.setState({prevButtonIsActive: false})\r\n            } else if (position !== 0 && !this.state.prevButtonIsActive) {\r\n                this.setState({prevButtonIsActive: true})\r\n            }\r\n            if (position === this.state.correctPositions.length - 1) {\r\n                this.setState({nextButtonIsActive: false})\r\n            } else if (position !== this.state.correctPositions.length - 1 && !this.state.nextButtonIsActive) {\r\n                this.setState({nextButtonIsActive: true})\r\n            }\r\n        }\r\n    }\r\n\r\n    getLoop(newPos) {\r\n        if (this.loop && this.state.correctPositions.indexOf(newPos) === 0 && this.state.correctPositions.length > 1) {\r\n            this.carouselContent.current.style.left = this.state.correctPositions[this.itemsQuantity] //flash move to tearget point\r\n            this.setState({currentPos: this.state.correctPositions[this.itemsQuantity]})\r\n        } else if (this.loop && this.state.correctPositions.indexOf(newPos) === this.state.correctPositions.length - 1 && this.state.correctPositions.length > 1) {\r\n            this.carouselContent.current.style.left = this.state.correctPositions[this.state.correctPositions.length - 1 - this.itemsQuantity] //flash move to tearget point\r\n            this.setState({currentPos: this.state.correctPositions[this.state.correctPositions.length - 1 - this.itemsQuantity]})\r\n        } else {\r\n            this.setState({currentPos: newPos})\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className='Carousel__container'>\r\n                <div className='Carousel' ref={this.carousel}>\r\n                    <CarouselContent onMoveStart={this.saveTouchPoint} \r\n                                    onMove={this.touchMove} \r\n                                    onMoveEnd={this.positionCorrection}\r\n                                    onFastSwipeEnd={this.fastSwipe}\r\n                                    ref={this.carouselContent}\r\n                    >\r\n                        {makeContentDOM(this.props.children, this.itemsPerView, this.loop)}  \r\n                    </CarouselContent>\r\n                    <CarouselPagination onClick={this.paginationMove} \r\n                                        itemsQuantity={this.itemsQuantity}\r\n                    />\r\n                </div>\r\n                <CarouselButton moveTo='previous'\r\n                                isActive={this.state.prevButtonIsActive} \r\n                                onClick={this.buttonMove}\r\n                                size={this.props.buttonSize}\r\n                                position={this.props.buttonPos}\r\n                />\r\n                <CarouselButton moveTo='next' \r\n                                isActive={this.state.nextButtonIsActive}\r\n                                onClick={this.buttonMove}\r\n                                size={this.props.buttonSize}\r\n                                position={this.props.buttonPos}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Carousel","import React from \"react\";\r\nimport './App.css'\r\nimport '../styles/anyClassName.css'\r\nimport Carousel from \"./Carousel/Carousel\"\r\n\r\nfunction App() {\r\n\r\n    function makeContentArr(numberOfItems) {\r\n        return Array(numberOfItems).fill('').reduce((content, elem, i) => {\r\n            content.push(<div key={i} className='anyClassName'>{i + 1}</div>)\r\n            return content\r\n        }, [])\r\n    }\r\n\r\n    function getRandom(min, max) {\r\n        return Math.floor(min + Math.random() * Math.floor(max + 1 - min));\r\n    }\r\n\r\n    const randomConfig = {\r\n        content: getRandom(1,10),\r\n        gap: getRandom(0,4) * 5,\r\n        itemsPerView: getRandom(3,5),\r\n        loop: getRandom(0,1) === 0 ? true : false,\r\n        buttonSize: getRandom(4,10) * 5,\r\n        buttonPos: getRandom(0,1) === 0 ? 10 : -40\r\n    }\r\n\r\n    return (\r\n        <div className='App'>\r\n            <h1 className='text'>Number of items: {randomConfig.content}</h1>\r\n            <h1 className='text'>Gap: {randomConfig.gap}px</h1>\r\n            <h1 className='text'>Items per view: {randomConfig.itemsPerView}</h1>\r\n            <h1 className='text'>Loop: {randomConfig.loop.toString()}</h1>\r\n            <h1 className='text'>Buttons size: {randomConfig.buttonSize}px</h1>\r\n            <h1 className='text'>Buttons position: {randomConfig.buttonPos > 0 ? 'in' : 'out'}</h1>\r\n            <h1 className='text'>Current settings was generated randomly. If you need to check how it works with other settings just refresh the page</h1>\r\n            {/* <Carousel\r\n                gap={randomConfig.gap}\r\n                itemsPerView={randomConfig.itemsPerView}\r\n                loop={randomConfig.loop}\r\n                buttonSize={randomConfig.buttonSize}\r\n                buttonPos={randomConfig.buttonPos}\r\n            >\r\n                {makeContentArr(randomConfig.content)}\r\n            </Carousel> */}\r\n            <Carousel\r\n                gap={20}\r\n                itemsPerView={1}\r\n                loop={true}\r\n                buttonSize={30}\r\n                buttonPos={30}\r\n            >\r\n                {makeContentArr(10)}\r\n            </Carousel>\r\n            <h1 className='text'>Number of items: {randomConfig.content}</h1>\r\n            <h1 className='text'>Gap: {randomConfig.gap}px</h1>\r\n            <h1 className='text'>Items per view: {randomConfig.itemsPerView}</h1>\r\n            <h1 className='text'>Loop: {randomConfig.loop.toString()}</h1>\r\n            <h1 className='text'>Buttons size: {randomConfig.buttonSize}px</h1>\r\n            <h1 className='text'>Buttons position: {randomConfig.buttonPos > 0 ? 'in' : 'out'}</h1>\r\n            <h1 className='text'>Current settings was generated randomly. If you need to check how it works with other settings just refresh the page</h1>            <h1 className='text'>Number of items: {randomConfig.content}</h1>\r\n            <h1 className='text'>Gap: {randomConfig.gap}px</h1>\r\n            <h1 className='text'>Items per view: {randomConfig.itemsPerView}</h1>\r\n            <h1 className='text'>Loop: {randomConfig.loop.toString()}</h1>\r\n            <h1 className='text'>Buttons size: {randomConfig.buttonSize}px</h1>\r\n            <h1 className='text'>Buttons position: {randomConfig.buttonPos > 0 ? 'in' : 'out'}</h1>\r\n            <h1 className='text'>Current settings was generated randomly. If you need to check how it works with other settings just refresh the page</h1>            <h1 className='text'>Number of items: {randomConfig.content}</h1>\r\n            <h1 className='text'>Gap: {randomConfig.gap}px</h1>\r\n            <h1 className='text'>Items per view: {randomConfig.itemsPerView}</h1>\r\n            <h1 className='text'>Loop: {randomConfig.loop.toString()}</h1>\r\n            <h1 className='text'>Buttons size: {randomConfig.buttonSize}px</h1>\r\n            <h1 className='text'>Buttons position: {randomConfig.buttonPos > 0 ? 'in' : 'out'}</h1>\r\n            <h1 className='text'>Current settings was generated randomly. If you need to check how it works with other settings just refresh the page</h1>            <h1 className='text'>Number of items: {randomConfig.content}</h1>\r\n            <h1 className='text'>Gap: {randomConfig.gap}px</h1>\r\n            <h1 className='text'>Items per view: {randomConfig.itemsPerView}</h1>\r\n            <h1 className='text'>Loop: {randomConfig.loop.toString()}</h1>\r\n            <h1 className='text'>Buttons size: {randomConfig.buttonSize}px</h1>\r\n            <h1 className='text'>Buttons position: {randomConfig.buttonPos > 0 ? 'in' : 'out'}</h1>\r\n            <h1 className='text'>Current settings was generated randomly. If you need to check how it works with other settings just refresh the page</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App.js\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}